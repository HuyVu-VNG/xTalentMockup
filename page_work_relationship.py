def page_work_relationship(person=None, work_relationships=None):
    import streamlit as st
    from streamlit_elements import elements, mui
    from streamlit_agraph import agraph, Node, Edge, Config

    # Dummy person v√† work_relationships (n·∫øu kh√¥ng truy·ªÅn v√†o)
    if person is None:
        person = {
            "id": "person-001",
            "name": "Nguy·ªÖn VƒÉn A",
            "avatar": "https://randomuser.me/api/portraits/men/65.jpg",
        }
    if work_relationships is None:
        work_relationships = [
            {
                "id": "wr-abc",
                "legal_entity": "C√¥ng ty ABC",
                "relationship_type": "Nh√¢n vi√™n ch√≠nh th·ª©c",
                "emp_code": "EMP001",
                "status": "Active",
                "from_date": "2021-01-15",
                "to_date": None,
                "assignments": [
                    {
                        "id": "as-1",
                        "job_title": "L·∫≠p tr√¨nh vi√™n ch√≠nh",
                        "department": "Ph√≤ng CNTT",
                        "emp_code": "EMP001",
                        "status": "Active",
                        "from_date": "2021-01-15",
                        "to_date": None,
                        "contract": "HD-001",
                    }
                ]
            },
            {
                "id": "wr-xyz",
                "legal_entity": "C√¥ng ty XYZ",
                "relationship_type": "C·ªông t√°c vi√™n",
                "emp_code": "EMPX23",
                "status": "Inactive",
                "from_date": "2020-03-01",
                "to_date": "2022-12-31",
                "assignments": [
                    {
                        "id": "as-2",
                        "job_title": "T∆∞ v·∫•n CNTT",
                        "department": "Ph√≤ng D·ª± √°n",
                        "emp_code": "EMPX23",
                        "status": "ƒê√£ k·∫øt th√∫c",
                        "from_date": "2020-03-01",
                        "to_date": "2022-12-31",
                        "contract": "HD-002",
                    }
                ]
            },
        ]

    st.subheader("ü§ù Quan h·ªá lao ƒë·ªông")
    st.caption("1 nh√¢n s·ª± c√≥ th·ªÉ c√≥ nhi·ªÅu quan h·ªá lao ƒë·ªông v·ªõi c√°c ph√°p nh√¢n kh√°c nhau, m·ªói quan h·ªá c√≥ nhi·ªÅu v·ªã tr√≠/assignment.")

    # --- B·∫£ng chi ti·∫øt Work Relationship ---
    with elements("workrel-table"):
        mui.Typography("Danh s√°ch quan h·ªá lao ƒë·ªông (Work Relationships)", variant="h6")
        for wr in work_relationships:
            with mui.Accordion(defaultExpanded=False, sx={"mb": 2}):
                with mui.AccordionSummary():
                    mui.Avatar("üè¢", sx={"mr": 2})
                    mui.Typography(f"{wr['legal_entity']} - {wr['relationship_type']} (Emp Code: {wr['emp_code']})", sx={"fontWeight": 600, "mr":2})
                    mui.Chip(label=wr['status'], color="success" if wr['status']=="Active" else "warning", size="small")
                    mui.Typography(f"T·ª´: {wr['from_date']} {'‚Üí ƒê·∫øn: '+wr['to_date'] if wr['to_date'] else ''}", sx={"ml":2})
                with mui.AccordionDetails():
                    mui.Typography("Assignments:", variant="subtitle1")
                    mui.TableContainer(
                        mui.Table(
                            mui.TableHead(
                                mui.TableRow(
                                    mui.TableCell("Job"),
                                    mui.TableCell("Ph√≤ng ban"),
                                    mui.TableCell("Tr·∫°ng th√°i"),
                                    mui.TableCell("T·ª´"),
                                    mui.TableCell("ƒê·∫øn"),
                                    mui.TableCell("Contract"),
                                )
                            ),
                            mui.TableBody(
                                *[
                                    mui.TableRow(
                                        mui.TableCell(a["job_title"]),
                                        mui.TableCell(a["department"]),
                                        mui.TableCell(a["status"]),
                                        mui.TableCell(a["from_date"]),
                                        mui.TableCell(a["to_date"] or "Hi·ªán t·∫°i"),
                                        mui.TableCell(a["contract"]),
                                    )
                                    for a in wr["assignments"]
                                ]
                            ),
                        )
                    )

    st.divider()

    # --- Graph tr·ª±c quan c√°c quan h·ªá ---
    st.markdown("### S∆° ƒë·ªì m·ªëi li√™n h·ªá lao ƒë·ªông (Person ‚Äì Work Relationship ‚Äì Assignment)")

    nodes = []
    edges = []

    # Node person
    nodes.append(Node(id=person["id"], label=person["name"], shape="circularImage", image=person["avatar"], size=50, color="#1565c0"))

    # Node work relationship (legal entity)
    for wr in work_relationships:
        wr_node_id = wr["id"]
        nodes.append(Node(id=wr_node_id, label=f"{wr['legal_entity']}\n{wr['relationship_type']}", size=30, color="#5e35b1"))
        edges.append(Edge(source=person["id"], target=wr_node_id, label="Work Rel."))

        # Node assignment
        for a in wr["assignments"]:
            as_node_id = a["id"]
            nodes.append(Node(id=as_node_id, label=f"{a['job_title']}\n{a['department']}", size=25, color="#43a047"))
            edges.append(Edge(source=wr_node_id, target=as_node_id, label="Assignment"))

            # Node contract (tu·ª≥ ch·ªçn)
            if "contract" in a and a["contract"]:
                c_node_id = f"ct-{a['contract']}"
                nodes.append(Node(id=c_node_id, label=f"Hƒê: {a['contract']}", size=18, color="#ef6c00"))
                edges.append(Edge(source=as_node_id, target=c_node_id, label="Contract"))

    config = Config(
        width=800,
        height=500,
        directed=True,
        nodeHighlightBehavior=True,
        highlightColor="#f50057",
        collapsible=True,
        node={'labelProperty':'label'},
        link={'labelProperty':'label', 'renderLabel': True}
    )

    agraph(nodes=nodes, edges=edges, config=config)

    st.caption("S∆° ƒë·ªì tr√™n gi√∫p HR d·ªÖ d√†ng h√¨nh dung quan h·ªá gi·ªØa nh√¢n s·ª± - ph√°p nh√¢n - c√°c v·ªã tr√≠ v√† h·ª£p ƒë·ªìng. C√≥ th·ªÉ m·ªü r·ªông ƒë·ªÉ th·ªÉ hi·ªán nhi·ªÅu t·∫ßng quan h·ªá h∆°n.")