def page_employee_profile(employee=None):
    import streamlit as st
    from streamlit_elements import elements, mui, nivo
    import plotly.express as px
    import pandas as pd
    import datetime

    # --- Dummy employee/assignment-level data l√†m gi√†u (song song, promote, transfer) ---
    if employee is None:
        employee = {
            "emp_code": "EMP001",
            "name": "L√™ VƒÉn B",
            "avatar": "https://randomuser.me/api/portraits/men/66.jpg",
            "job_title": "Ph√≥ ph√≤ng HCNS",
            "department": "Ph√≤ng HCNS",
            "legal_entity": "C√¥ng ty ABC",
            "status": "Active",
            "joined_date": "2021-06-01",
            "contract": {
                "number": "HD2021-001",
                "type": "Kh√¥ng x√°c ƒë·ªãnh th·ªùi h·∫°n",
                "signed_date": "2021-06-01",
                "expiry_date": None,
                "status": "Hi·ªáu l·ª±c",
                "appendices": [
                    {"number": "PL-001", "desc": "ƒêi·ªÅu ch·ªânh l∆∞∆°ng", "date": "2022-01-01"},
                ]
            },
            "assignment_history": [
                {
                    "from": "2021-06-01", "to": "2022-05-31",
                    "job_title": "Nh√¢n vi√™n VƒÉn ph√≤ng", "department": "Ph√≤ng HCNS", "status": "Fulltime"
                },
                {
                    "from": "2021-11-01", "to": "2022-03-31",
                    "job_title": "Tr·ª£ l√Ω D·ª± √°n", "department": "Ph√≤ng D·ª± √°n", "status": "Parttime"
                },
                {
                    "from": "2022-06-01", "to": "2023-06-30",
                    "job_title": "Chuy√™n vi√™n VƒÉn ph√≤ng", "department": "Ph√≤ng HCNS", "status": "Promoted"
                },
                {
                    "from": "2023-07-01", "to": None,
                    "job_title": "Ph√≥ ph√≤ng HCNS", "department": "Ph√≤ng HCNS", "status": "Active"
                },
                {
                    "from": "2023-01-01", "to": "2023-06-30",
                    "job_title": "Chuy√™n vi√™n IT (Ki√™m nhi·ªám)", "department": "Ph√≤ng CNTT", "status": "Concurrent"
                }
            ],
            "position_code": "POS-101",
            "jd": "Ph·ªëi h·ª£p qu·∫£n tr·ªã nh√¢n s·ª±, ƒëi·ªÅu ph·ªëi d·ª± √°n HR, qu·∫£n l√Ω team.",
            "salary": [
                {"from": "2021-06-01", "to": "2022-05-31", "base": 12000000, "allowance": 1500000},
                {"from": "2022-06-01", "to": "2023-06-30", "base": 16000000, "allowance": 2500000},
                {"from": "2023-07-01", "to": None, "base": 22000000, "allowance": 5000000},
            ],
            "attendance": {
                "working_days": 22, "late": 1, "leave": 2, "ot": 4, "annual_leave_left": 6,
            },
            "performance": [
                {"period": "2021", "kpi": 75, "grade": "B"},
                {"period": "2022", "kpi": 82, "grade": "B+"},
                {"period": "2023", "kpi": 92, "grade": "A"},
            ],
            "rewards_discipline": [
                {"date": "2022-11-01", "type": "Khen th∆∞·ªüng", "title": "Nh√¢n vi√™n xu·∫•t s·∫Øc", "note": "ƒê·∫°t KPI cao nh·∫•t ph√≤ng HCNS"},
                {"date": "2023-03-10", "type": "K·ª∑ lu·∫≠t", "title": "Khi·ªÉn tr√°ch", "note": "Qu√™n b√°o c√°o ti·∫øn ƒë·ªô tu·∫ßn"},
            ],
            "assets": [
                {"asset": "Laptop", "serial": "ABC123", "date_assigned": "2021-06-01", "status": "ƒêang s·ª≠ d·ª•ng"},
                {"asset": "SIM ƒëi·ªán tho·∫°i", "serial": "0909111222", "date_assigned": "2021-06-05", "status": "Thu h·ªìi"},
            ],
            "requests": [
                {"date": "2024-02-01", "type": "TƒÉng l∆∞∆°ng", "status": "ƒê√£ duy·ªát"},
                {"date": "2023-12-10", "type": "Ngh·ªâ ph√©p", "status": "ƒê√£ duy·ªát"},
            ],
            "documents": [
                {"type": "H·ª£p ƒë·ªìng lao ƒë·ªông", "file": "HD2021-001.pdf", "date": "2021-06-01"},
                {"type": "Ph·ª• l·ª•c", "file": "PL-001.pdf", "date": "2022-01-01"},
            ],
            "current_plan": {
                "engagement": "Medium", "risk": "Normal", "retention": "Ti·ªÅm nƒÉng gi·ªØ ch√¢n"
            }
        }

    st.subheader(f"üë®‚Äçüíº H·ªì s∆° Nh√¢n vi√™n 360 ‚Äì {employee['name']} (Emp Code: {employee['emp_code']})")

    # ---- Mini-dashboard, avatar...
    with elements("employee-overview"):
        with mui.Paper(sx={"p":3, "display":"flex", "alignItems":"center", "gap":3, "mb":2, "boxShadow":3, "borderRadius":2}):
            mui.Avatar(src=employee["avatar"], sx={"width":80, "height":80, "mr":3})
            with mui.Box():
                mui.Typography(employee["name"], variant="h5", sx={"fontWeight":600})
                mui.Typography(f"Emp Code: {employee['emp_code']} | {employee['job_title']} | {employee['department']}", variant="body2")
                mui.Typography(f"Ph√°p nh√¢n: {employee['legal_entity']} | V√†o l√†m: {employee['joined_date']}", variant="body2")
                status_map = {
                    "Active": "#388e3c", "Probation": "#1976d2", "Suspended": "#ffa000", "Terminated": "#d32f2f"
                }
                mui.Chip(label=employee["status"], color="success" if employee["status"]=="Active" else "warning", sx={"bgcolor":status_map.get(employee["status"], "#9e9e9e"), "color":"white", "fontWeight":600, "mt":1})

    kpis = [
        {"label": "T·ªïng l∆∞∆°ng hi·ªán t·∫°i", "value": f"{employee['salary'][-1]['base'] + employee['salary'][-1]['allowance']:,}ƒë", "color": "#388e3c"},
        {"label": "Ph√©p c√≤n l·∫°i", "value": f"{employee['attendance']['annual_leave_left']}", "color": "#1976d2"},
        {"label": "ƒêi·ªÉm KPI m·ªõi nh·∫•t", "value": f"{employee['performance'][-1]['kpi']}", "color": "#ffa000"},
        {"label": "T√†i s·∫£n ƒëang d√πng", "value": f"{sum(1 for a in employee['assets'] if a['status']=='ƒêang s·ª≠ d·ª•ng')}", "color": "#7b1fa2"},
    ]
    cols = st.columns(len(kpis))
    for i, col in enumerate(cols):
        with col:
            st.markdown(
                f"""
                <div style="background:{kpis[i]['color']};padding:12px 10px;border-radius:10px;color:white;">
                    <b>{kpis[i]['label']}</b><div style="font-size:1.7em">{kpis[i]['value']}</div>
                </div>
                """, unsafe_allow_html=True
            )
    st.divider()

    tabs = st.tabs([
        "T·ªïng quan", "H·ª£p ƒë·ªìng & ph·ª• l·ª•c", "L·ªãch s·ª≠ c√¥ng vi·ªác", "V·ªã tr√≠ & m√¥ t·∫£", "L∆∞∆°ng & ƒë√£i ng·ªô", 
        "Ch·∫•m c√¥ng & ngh·ªâ ph√©p", "Hi·ªáu su·∫•t", "Khen th∆∞·ªüng/K·ª∑ lu·∫≠t", "T√†i s·∫£n", "L·ªãch s·ª≠ ƒë·ªÅ xu·∫•t", 
        "H·ªì s∆° t√†i li·ªáu", "T√¨nh tr·∫°ng & k·∫ø ho·∫°ch"
    ])

    # Tab 1: T·ªïng quan - Timeline c√¥ng vi·ªác d√πng plotly.timeline (group by ph√≤ng ban)
    with tabs[0]:
        st.markdown("#### Timeline l·ªãch s·ª≠ Assignment (song song ‚Äì promote ‚Äì transfer)")
        # Convert to dataframe for Plotly
        now = datetime.datetime.now().strftime("%Y-%m-%d")
        df_assign = pd.DataFrame([
            {
                "Ph√≤ng ban": his["department"],
                "V·ªã tr√≠": his["job_title"],
                "B·∫Øt ƒë·∫ßu": his["from"],
                "K·∫øt th√∫c": his["to"] or now,
                "Tr·∫°ng th√°i": his["status"],
            }
            for his in employee["assignment_history"]
        ])
        # Plotly timeline (multi-row, color by department)
        fig = px.timeline(
            df_assign,
            x_start="B·∫Øt ƒë·∫ßu",
            x_end="K·∫øt th√∫c",
            y="Ph√≤ng ban",  # Group theo ph√≤ng ban (department)
            color="V·ªã tr√≠",
            hover_data=["V·ªã tr√≠", "Tr·∫°ng th√°i", "B·∫Øt ƒë·∫ßu", "K·∫øt th√∫c"],
            title="Timeline l·ªãch s·ª≠ c√¥ng vi·ªác (song song, promote, chuy·ªÉn ph√≤ng)"
        )
        fig.update_yaxes(autorange="reversed")
        fig.update_layout(
            height=330,
            margin=dict(l=40, r=40, t=60, b=30),
            xaxis_title="Th·ªùi gian",
            yaxis_title="Ph√≤ng ban",
            legend_title="V·ªã tr√≠"
        )
        st.plotly_chart(fig, use_container_width=True)

    # C√°c tab kh√°c gi·ªØ nguy√™n (nh∆∞ code c≈©) ...

    # Tab 2: H·ª£p ƒë·ªìng & ph·ª• l·ª•c
    with tabs[1]:
        st.markdown("#### Th√¥ng tin h·ª£p ƒë·ªìng lao ƒë·ªông")
        st.write(f"S·ªë h·ª£p ƒë·ªìng: {employee['contract']['number']}")
        st.write(f"Lo·∫°i h·ª£p ƒë·ªìng: {employee['contract']['type']}")
        st.write(f"K√Ω ng√†y: {employee['contract']['signed_date']}")
        st.write(f"Ng√†y h·∫øt h·∫°n: {employee['contract']['expiry_date'] or 'Kh√¥ng x√°c ƒë·ªãnh'}")
        st.write(f"Tr·∫°ng th√°i: {employee['contract']['status']}")
        st.markdown("##### Ph·ª• l·ª•c h·ª£p ƒë·ªìng")
        st.table(employee['contract']['appendices'])

    # Tab 3: L·ªãch s·ª≠ c√¥ng vi·ªác (promote, chuy·ªÉn ph√≤ng)
    with tabs[2]:
        st.markdown("#### Timeline l·ªãch s·ª≠ v·ªã tr√≠ l√†m vi·ªác")
        now = datetime.datetime.now().strftime("%Y-%m-%d")
        df_assign = pd.DataFrame([
            {
                "Ph√≤ng ban": his["department"],
                "V·ªã tr√≠": his["job_title"],
                "B·∫Øt ƒë·∫ßu": his["from"],
                "K·∫øt th√∫c": his["to"] or now,
                "Tr·∫°ng th√°i": his["status"],
            }
            for his in employee["assignment_history"]
        ])
        fig2 = px.timeline(
            df_assign,
            x_start="B·∫Øt ƒë·∫ßu",
            x_end="K·∫øt th√∫c",
            y="V·ªã tr√≠",     # ho·∫∑c "Ph√≤ng ban" tu·ª≥ m·ª•c ƒë√≠ch
            color="Tr·∫°ng th√°i",
            hover_data=["Ph√≤ng ban", "B·∫Øt ƒë·∫ßu", "K·∫øt th√∫c"],
            title="Timeline l·ªãch s·ª≠ v·ªã tr√≠"
        )
        fig2.update_yaxes(autorange="reversed")
        fig2.update_layout(
            height=300,
            margin=dict(l=40, r=40, t=50, b=30),
        )
        st.plotly_chart(fig2, use_container_width=True)


    # Tab 4‚Äì12 (gi·ªØ nguy√™n, nh∆∞ ·ªü code tr∆∞·ªõc...)

    with tabs[3]:
        st.write(f"**V·ªã tr√≠ hi·ªán t·∫°i:** {employee['job_title']}")
        st.write(f"**Ph√≤ng ban:** {employee['department']}")
        st.write(f"**M√£ v·ªã tr√≠:** {employee['position_code']}")
        st.markdown(f"**M√¥ t·∫£ c√¥ng vi·ªác:** {employee['jd']}")

    with tabs[4]:
        st.markdown("#### L·ªãch s·ª≠ l∆∞∆°ng & ph·ª• c·∫•p")
        st.table([
            {
                "T·ª´": sal["from"],
                "ƒê·∫øn": sal["to"] or "Hi·ªán t·∫°i",
                "L∆∞∆°ng c∆° b·∫£n": f"{sal['base']:,}ƒë",
                "Ph·ª• c·∫•p": f"{sal['allowance']:,}ƒë",
                "T·ªïng": f"{sal['base']+sal['allowance']:,}ƒë"
            } for sal in employee["salary"]
        ])

    with tabs[5]:
        st.markdown("#### Ch·∫•m c√¥ng th√°ng n√†y")
        st.write(f"S·ªë ng√†y l√†m: {employee['attendance']['working_days']}")
        st.write(f"Ng√†y ƒëi mu·ªôn: {employee['attendance']['late']}")
        st.write(f"Ngh·ªâ c√≥ ph√©p: {employee['attendance']['leave']}")
        st.write(f"S·ªë gi·ªù OT: {employee['attendance']['ot']}")
        st.write(f"Ph√©p c√≤n l·∫°i: {employee['attendance']['annual_leave_left']}")

    with tabs[6]:
        st.markdown("#### L·ªãch s·ª≠ ƒë√°nh gi√° hi·ªáu su·∫•t (KPI/OKR)")
        st.table([
            {
                "K·ª≥": perf["period"],
                "KPI": perf["kpi"],
                "X·∫øp lo·∫°i": perf["grade"]
            } for perf in employee["performance"]
        ])

    with tabs[7]:
        st.markdown("#### Khen th∆∞·ªüng/K·ª∑ lu·∫≠t li√™n quan assignment n√†y")
        st.table(employee["rewards_discipline"])

    with tabs[8]:
        st.markdown("#### Danh s√°ch t√†i s·∫£n ƒë√£ c·∫•p")
        st.table(employee["assets"])

    with tabs[9]:
        st.markdown("#### L·ªãch s·ª≠ ƒë·ªÅ xu·∫•t")
        st.table(employee["requests"])

    with tabs[10]:
        st.markdown("#### T√†i li·ªáu li√™n quan assignment")
        st.table(employee["documents"])

    with tabs[11]:
        st.markdown("#### T√¨nh tr·∫°ng hi·ªán t·∫°i & k·∫ø ho·∫°ch")
        st.write(f"G·∫Øn k·∫øt: {employee['current_plan']['engagement']}")
        st.write(f"Nguy c∆° ngh·ªâ vi·ªác: {employee['current_plan']['risk']}")
        st.write(f"Gi·ªØ ch√¢n: {employee['current_plan']['retention']}")
        if employee['current_plan']['risk'] == "Critical":
            st.error("‚ö†Ô∏è Nguy c∆° ngh·ªâ vi·ªác cao ‚Äì C·∫ßn l∆∞u √Ω gi·ªØ ch√¢n nh√¢n s·ª± n√†y!")
        elif employee['current_plan']['risk'] == "High":
            st.warning("‚ö†Ô∏è Nguy c∆° ngh·ªâ vi·ªác ·ªü m·ª©c cao.")
        elif employee['current_plan']['engagement'] == "High":
            st.success("Nh√¢n s·ª± ƒëang c√≥ m·ª©c g·∫Øn k·∫øt t·ªët.")
        else:
            st.info("T√¨nh tr·∫°ng ·ªïn ƒë·ªãnh.")

    st.divider()
    st.caption("UX xTalent ‚Äì Employee 360: l·ªãch s·ª≠ assignment song song, thuy√™n chuy·ªÉn, promote ‚Äì d√†nh cho HR chuy√™n s√¢u.")
