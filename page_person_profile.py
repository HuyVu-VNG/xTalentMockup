def page_person_profile(person=None, work_relationships=None):
    import streamlit as st
    from streamlit_elements import elements, mui
    import datetime
    import streamlit_folium
    import folium

    # 1. Dummy data (n·∫øu ch∆∞a truy·ªÅn v√†o)
    if person is None:
        person = {
            "avatar": "https://randomuser.me/api/portraits/men/65.jpg",
            "name": "Nguy·ªÖn VƒÉn A",
            "gender": "Nam",
            "dob": "1993-05-22",
            "xtalent_code": "PERSON-2024-001",
            "email": "nguyenvana@xtalent.vn",
            "phone": "0909 123 456",
            "address": "Z123 ƒê∆∞·ªùng 13, Q.7, TP.HCM",
            "lat": 10.758278, "lng": 106.7210879,  # to show on map ,
            "emergency_contact": "Nguy·ªÖn Th·ªã B - 0909 999 888",
            "degree": "ƒê·∫°i h·ªçc CNTT",
            "relatives": ["Nguy·ªÖn Th·ªã B (v·ª£)", "Nguy·ªÖn VƒÉn C (con)"],
            "identity": {"type": "CMND", "number": "123456789", "issued": "2010-01-01"},
            "bank": {"name": "Vietcombank", "acc": "123456789", "branch": "PGD S√†i G√≤n"},
            "payment": {"method": "Bank", "note": "Chuy·ªÉn kho·∫£n l∆∞∆°ng ng√†y 28 h√†ng th√°ng"},
        }

    if work_relationships is None:
        work_relationships = [
            {
                "legal_entity": "C√¥ng ty ABC",
                "relationship_type": "Nh√¢n vi√™n ch√≠nh th·ª©c",
                "emp_code": "EMP001",
                "status": "Active",
                "from_date": "2021-01-15",
                "to_date": None,
                "assignments": [
                    {
                        "job_title": "L·∫≠p tr√¨nh vi√™n ch√≠nh",
                        "department": "Ph√≤ng CNTT",
                        "status": "Active",
                        "assignment_code": "A1",
                        "from_date": "2021-01-15",
                        "to_date": None,
                    }
                ]
            },
            {
                "legal_entity": "C√¥ng ty XYZ",
                "relationship_type": "C·ªông t√°c vi√™n",
                "emp_code": "EMPX23",
                "status": "Inactive",
                "from_date": "2020-03-01",
                "to_date": "2022-12-31",
                "assignments": [
                    {
                        "job_title": "T∆∞ v·∫•n CNTT",
                        "department": "Ph√≤ng D·ª± √°n",
                        "status": "ƒê√£ k·∫øt th√∫c",
                        "assignment_code": "A2",
                        "from_date": "2020-03-01",
                        "to_date": "2022-12-31",
                    }
                ]
            },
        ]

    st.subheader("üë§ H·ªì S∆° C√° Nh√¢n")
    with elements("profile-card"):
        # --- H·ªì s∆° c√° nh√¢n ---
        with mui.Paper(sx={"p":3, "display":"flex", "alignItems":"center", "gap":3, "mb":3, "boxShadow":3, "borderRadius":2}):
            mui.Avatar(src=person["avatar"], sx={"width":96, "height":96, "mr":3})
            with mui.Box():
                mui.Typography(person["name"], variant="h5", sx={"fontWeight":600})
                mui.Typography(f"ID xTalent: {person['xtalent_code']}", variant="body2")
                mui.Typography(f"Gi·ªõi t√≠nh: {person['gender']} | Ng√†y sinh: {datetime.datetime.strptime(person['dob'], '%Y-%m-%d').strftime('%d/%m/%Y')}", variant="body2")
                mui.Typography(f"Email: {person['email']} | ƒêT: {person['phone']}", variant="body2")

    # TABS UI
    tabs = st.tabs([
        "Th√¥ng tin c√° nh√¢n", "Li√™n h·ªá", "M·ªü r·ªông","Quan h·ªá lao ƒë·ªông", "Khen th∆∞·ªüng/K·ª∑ lu·∫≠t", "T√†i li·ªáu scan"
    ])
    with tabs[0]:
        st.write("**Ng√†y sinh:**", datetime.datetime.strptime(person["dob"], "%Y-%m-%d").strftime("%d/%m/%Y"))
        st.write("**Gi·ªõi t√≠nh:**", person["gender"])
        st.write("**ƒê·ªãa ch·ªâ:**", person["address"])
        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì
        m = folium.Map(location=[person["lat"], person["lng"]], zoom_start=15)
        folium.Marker([person["lat"], person["lng"]], tooltip=person["address"]).add_to(m)
        streamlit_folium.folium_static(m, width=500, height=250)

    with tabs[1]:
        st.write("**Email:**", person["email"])
        st.write("**ƒêi·ªán tho·∫°i:**", person["phone"])
        st.write("**Li√™n h·ªá kh·∫©n c·∫•p:**", person["emergency_contact"])

    with tabs[2]:
        st.write("**B·∫±ng c·∫•p:**", person["degree"])
        st.write("**Ng∆∞·ªùi th√¢n:**", ", ".join(person["relatives"]))
        st.write("**Gi·∫•y t·ªù tu·ª≥ th√¢n:**", f"{person['identity']['type']} s·ªë {person['identity']['number']} (c·∫•p: {person['identity']['issued']})")
        st.write("**Ng√¢n h√†ng:**", f"{person['bank']['name']} ‚Äì {person['bank']['acc']} ({person['bank']['branch']})")
        st.write("**Th√¥ng tin thanh to√°n:**", f"{person['payment']['method']} ‚Äì {person['payment']['note']}")

    with tabs[3]:
        st.markdown("### Danh s√°ch Quan h·ªá lao ƒë·ªông (Work Relationships)")
        for idx, wr in enumerate(work_relationships, 1):
            st.markdown(f"#### {idx}. {wr['legal_entity']} ‚Äì {wr['relationship_type']} (Emp Code: {wr['emp_code']})")
            st.write(
                f"**Tr·∫°ng th√°i:** {wr['status']} | "
                f"**T·ª´:** {wr['from_date']}"
                + (f" ‚Üí **ƒê·∫øn:** {wr['to_date']}" if wr['to_date'] else "")
            )
            st.markdown("**Assignments:**")
            # Assignment table
            st.table([
                {
                    "Code": a["assignment_code"],
                    "Job": a["job_title"],
                    "Ph√≤ng ban": a["department"],
                    "Tr·∫°ng th√°i": a["status"],
                    "T·ª´": a["from_date"],
                    "ƒê·∫øn": a["to_date"] or "Hi·ªán t·∫°i",
                }
                for a in wr["assignments"]
            ])
    # Khen th∆∞·ªüng/K·ª∑ lu·∫≠t
    with tabs[4]:
        st.markdown("### L·ªãch s·ª≠ Khen th∆∞·ªüng & K·ª∑ lu·∫≠t")
        reward_punish_list = [
            {"Ng√†y": "2022-11-01", "Lo·∫°i": "Khen th∆∞·ªüng", "T√™n": "B·∫±ng khen t·∫≠p ƒëo√†n", "N·ªôi dung": "Ho√†n th√†nh xu·∫•t s·∫Øc d·ª± √°n ERP"},
            {"Ng√†y": "2023-03-10", "Lo·∫°i": "K·ª∑ lu·∫≠t", "T√™n": "Khi·ªÉn tr√°ch", "N·ªôi dung": "ƒêi l√†m tr·ªÖ nhi·ªÅu l·∫ßn"},
            # ... th√™m d√≤ng ...
        ]
        st.table(reward_punish_list)
        st.info("Ch·ªâ c√°c quy·∫øt ƒë·ªãnh c·∫•p to√†n c√° nh√¢n (Person) m·ªõi xu·∫•t hi·ªán ·ªü ƒë√¢y. C√°c quy·∫øt ƒë·ªãnh theo assignment xem chi ti·∫øt trong tab Quan h·ªá lao ƒë·ªông.")

    # T√†i li·ªáu scan (Scan documents)
    with tabs[5]:
        st.markdown("### T√†i li·ªáu scan ƒë√≠nh k√®m")
        doc_list = [
            {"Lo·∫°i": "CMND/CCCD", "T·ªáp": "cmnd_nguyenvana.pdf", "Ng√†y upload": "2022-01-05"},
            {"Lo·∫°i": "B·∫±ng ƒë·∫°i h·ªçc", "T·ªáp": "bang_daihoc.pdf", "Ng√†y upload": "2021-06-01"},
            # ... th√™m d√≤ng ...
        ]
        st.table(doc_list)
        st.info("Ch·ªâ nh·ªØng t√†i li·ªáu h·ªì s∆° g·ªëc c·ªßa c√° nh√¢n. H·ªì s∆° h·ª£p ƒë·ªìng, gi·∫•y t·ªù ph√°p nh√¢n s·∫Ω l∆∞u k√®m assignment.")

    st.divider()
    st.caption("UX xTalent: 1 Person ‚Äì N Work Relationships (Legal Entity) ‚Äì N Assignments (Job/Dept/Code). Ph√π h·ª£p chu·∫©n HR qu·ªëc t·∫ø.")