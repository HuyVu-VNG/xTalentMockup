def page_person_profile(person=None, work_relationships=None):
    import streamlit as st
    from streamlit_elements import elements, mui
    import datetime
    import streamlit_folium
    import folium
    from streamlit_echarts import st_echarts
    import plotly.graph_objects as go

    def tab_job_matching():
        st.markdown("## üó∫Ô∏è B·∫£n ƒë·ªì C∆° h·ªôi Ngh·ªÅ nghi·ªáp (Job Matching Map)")
        st.info(
            "Bi·ªÉu ƒë·ªì n√†y gi√∫p b·∫°n h√¨nh dung c√°c **c∆° h·ªôi ph√°t tri·ªÉn ngh·ªÅ nghi·ªáp** n·ªôi b·ªô theo nƒÉng l·ª±c, b·∫±ng c·∫•p, ch·ª©ng ch·ªâ, k·ªπ nƒÉng c·ªßa m√¨nh. "
            "M·ªói lu·ªìng th·ªÉ hi·ªán kh·∫£ nƒÉng k·∫øt n·ªëi t·ª´ nƒÉng l·ª±c hi·ªán t·∫°i ƒë·∫øn v·ªã tr√≠ c√¥ng vi·ªác trong t·ªï ch·ª©c."
        )

        # 1. Labels theo ƒë√∫ng t·ª´ng node trong option
        labels = [
            "Nguy·ªÖn VƒÉn A",               # 0 - Worker
            "ƒê·∫°i h·ªçc CNTT",               # 1 - Degree
            "NƒÉng l·ª±c L·∫≠p tr√¨nh",         # 2 - Comp
            "NƒÉng l·ª±c Ph√¢n t√≠ch d·ªØ li·ªáu", # 3 - Comp
            "Ch·ª©ng ch·ªâ PMP",              # 4 - Cert
            "Python",                     # 5 - Skill
            "SQL",                        # 6 - Skill
            "Qu·∫£n l√Ω d·ª± √°n",              # 7 - Skill
            "Business Analysis",          # 8 - Skill
            "Senior Developer",           # 9 - Job
            "Data Analyst",               # 10 - Job
            "Project Manager",            # 11 - Job
            "Business Analyst"            # 12 - Job
        ]

        # 2. Lu·ªìng (source, target, value) t∆∞∆°ng ·ª©ng v·ªõi ECharts
        links = [
            # Worker -> Degree/Comp/Cert
            (0, 1, 1),
            (0, 2, 1),
            (0, 4, 1),
            (0, 3, 1),
            # Degree/Comp/Cert -> Skills
            (1, 5, 1),
            (2, 5, 1),
            (4, 7, 1),
            (3, 6, 1),
            (3, 8, 1),
            # Skills -> Jobs
            (5, 9, 1),
            (6, 10, 1),
            (8, 12, 1),
            (7, 11, 1),
            (8, 11, 1),   # cross skill
        ]

        # 3. M√†u node (theo depth)
        node_colors = [
            "#ffe599",     # 0 - Worker
            "#a4c2f4",     # 1 - Degree
            "#a4c2f4",     # 2 - Comp
            "#a4c2f4",     # 3 - Comp
            "#a4c2f4",     # 4 - Cert
            "#b6d7a8",     # 5 - Skill
            "#b6d7a8",     # 6 - Skill
            "#b6d7a8",     # 7 - Skill
            "#b6d7a8",     # 8 - Skill
            "#e06666",     # 9 - Job
            "#e06666",     # 10 - Job
            "#e06666",     # 11 - Job
            "#e06666",     # 12 - Job
        ]

        # 4. T·∫°o Sankey Diagram
        fig = go.Figure(go.Sankey(
            node = dict(
                pad = 18,
                thickness = 26,
                line = dict(color = "#888", width = 0.5),
                label = labels,
                color = node_colors,
                hovertemplate='%{label}<extra></extra>',
            ),
            link = dict(
                source = [src for src, tgt, val in links],
                target = [tgt for src, tgt, val in links],
                value  = [val for src, tgt, val in links],
                color = "rgba(160,160,160,0.32)",
                hovertemplate='T·ª´ %{source.label} ‚Üí %{target.label}<br>S·ª©c m·∫°nh: %{value}<extra></extra>',
            )
        ))

        fig.update_layout(
            title="B·∫£n ƒë·ªì C∆° h·ªôi Ngh·ªÅ nghi·ªáp (Job Matching Map)",
            title_x=0.5,
            font=dict(size=13, color="#333"),
            margin=dict(l=10, r=10, t=40, b=10),
            height=540,
        )
        st.plotly_chart(fig, use_container_width=True)
        st.caption("üí° M·ªói lu·ªìng minh ho·∫° nƒÉng l·ª±c/b·∫±ng c·∫•p/ch·ª©ng ch·ªâ c·ªßa b·∫°n li√™n k·∫øt ƒë·∫øn k·ªπ nƒÉng then ch·ªët v√† c√°c v·ªã tr√≠ c√¥ng vi·ªác n·ªôi b·ªô ph√π h·ª£p.")

    # ƒê·ªÉ nh√∫ng: v·ªõi tab ho·∫∑c ri√™ng page, g·ªçi tab_job_matching()

    # 1. Dummy data (n·∫øu ch∆∞a truy·ªÅn v√†o)
    if person is None:
        person = {
            "avatar": "https://randomuser.me/api/portraits/men/65.jpg",
            "name": "Nguy·ªÖn VƒÉn A",
            "gender": "Nam",
            "dob": "1993-05-22",
            "xtalent_code": "PERSON-2024-001",
            "email": "nguyenvana@xtalent.vn",
            "phone": "0909 123 456",
            "address": "Z123 ƒê∆∞·ªùng 13, Q.7, TP.HCM",
            "lat": 10.758278, "lng": 106.7210879,  # to show on map ,
            "emergency_contact": "Nguy·ªÖn Th·ªã B - 0909 999 888",
            "degree": "ƒê·∫°i h·ªçc CNTT",
            "relatives": ["Nguy·ªÖn Th·ªã B (v·ª£)", "Nguy·ªÖn VƒÉn C (con)"],
            "identity": {"type": "CMND", "number": "123456789", "issued": "2010-01-01"},
            "bank": {"name": "Vietcombank", "acc": "123456789", "branch": "PGD S√†i G√≤n"},
            "payment": {"method": "Bank", "note": "Chuy·ªÉn kho·∫£n l∆∞∆°ng ng√†y 28 h√†ng th√°ng"},
        }

    if work_relationships is None:
        work_relationships = [
            {
                "legal_entity": "C√¥ng ty ABC",
                "relationship_type": "Nh√¢n vi√™n ch√≠nh th·ª©c",
                "emp_code": "EMP001",
                "status": "Active",
                "from_date": "2021-01-15",
                "to_date": None,
                "assignments": [
                    {
                        "job_title": "L·∫≠p tr√¨nh vi√™n ch√≠nh",
                        "department": "Ph√≤ng CNTT",
                        "status": "Active",
                        "assignment_code": "A1",
                        "from_date": "2021-01-15",
                        "to_date": None,
                    }
                ]
            },
            {
                "legal_entity": "C√¥ng ty XYZ",
                "relationship_type": "C·ªông t√°c vi√™n",
                "emp_code": "EMPX23",
                "status": "Inactive",
                "from_date": "2020-03-01",
                "to_date": "2022-12-31",
                "assignments": [
                    {
                        "job_title": "T∆∞ v·∫•n CNTT",
                        "department": "Ph√≤ng D·ª± √°n",
                        "status": "ƒê√£ k·∫øt th√∫c",
                        "assignment_code": "A2",
                        "from_date": "2020-03-01",
                        "to_date": "2022-12-31",
                    }
                ]
            },
        ]

    st.subheader("üë§ H·ªì S∆° C√° Nh√¢n")
    with elements("profile-card"):
        # --- H·ªì s∆° c√° nh√¢n ---
        with mui.Paper(sx={"p":3, "display":"flex", "alignItems":"center", "gap":3, "mb":3, "boxShadow":3, "borderRadius":2}):
            mui.Avatar(src=person["avatar"], sx={"width":96, "height":96, "mr":3})
            with mui.Box():
                mui.Typography(person["name"], variant="h5", sx={"fontWeight":600})
                mui.Typography(f"ID xTalent: {person['xtalent_code']}", variant="body2")
                mui.Typography(f"Gi·ªõi t√≠nh: {person['gender']} | Ng√†y sinh: {datetime.datetime.strptime(person['dob'], '%Y-%m-%d').strftime('%d/%m/%Y')}", variant="body2")
                mui.Typography(f"Email: {person['email']} | ƒêT: {person['phone']}", variant="body2")

    # TABS UI
    tabs = st.tabs([
        "Th√¥ng tin c√° nh√¢n", "Li√™n h·ªá", "M·ªü r·ªông","Quan h·ªá lao ƒë·ªông", "Khen th∆∞·ªüng/K·ª∑ lu·∫≠t", "T√†i li·ªáu scan", "B·∫£n ƒë·ªì C∆° h·ªôi ngh·ªÅ nghi·ªáp", "B·∫£n ƒë·ªì c∆° h·ªôi ngh·ªÅ nghi·ªáp - Plotly"
    ])
    with tabs[0]:
        st.write("**Ng√†y sinh:**", datetime.datetime.strptime(person["dob"], "%Y-%m-%d").strftime("%d/%m/%Y"))
        st.write("**Gi·ªõi t√≠nh:**", person["gender"])
        st.write("**ƒê·ªãa ch·ªâ:**", person["address"])
        # Hi·ªÉn th·ªã b·∫£n ƒë·ªì
        m = folium.Map(location=[person["lat"], person["lng"]], zoom_start=15)
        folium.Marker([person["lat"], person["lng"]], tooltip=person["address"]).add_to(m)
        streamlit_folium.folium_static(m, width=500, height=250)

    with tabs[1]:
        st.write("**Email:**", person["email"])
        st.write("**ƒêi·ªán tho·∫°i:**", person["phone"])
        st.write("**Li√™n h·ªá kh·∫©n c·∫•p:**", person["emergency_contact"])

    with tabs[2]:
        st.write("**B·∫±ng c·∫•p:**", person["degree"])
        st.write("**Ng∆∞·ªùi th√¢n:**", ", ".join(person["relatives"]))
        st.write("**Gi·∫•y t·ªù tu·ª≥ th√¢n:**", f"{person['identity']['type']} s·ªë {person['identity']['number']} (c·∫•p: {person['identity']['issued']})")
        st.write("**Ng√¢n h√†ng:**", f"{person['bank']['name']} ‚Äì {person['bank']['acc']} ({person['bank']['branch']})")
        st.write("**Th√¥ng tin thanh to√°n:**", f"{person['payment']['method']} ‚Äì {person['payment']['note']}")

    with tabs[3]:
        st.markdown("### Danh s√°ch Quan h·ªá lao ƒë·ªông (Work Relationships)")
        for idx, wr in enumerate(work_relationships, 1):
            st.markdown(f"#### {idx}. {wr['legal_entity']} ‚Äì {wr['relationship_type']} (Emp Code: {wr['emp_code']})")
            st.write(
                f"**Tr·∫°ng th√°i:** {wr['status']} | "
                f"**T·ª´:** {wr['from_date']}"
                + (f" ‚Üí **ƒê·∫øn:** {wr['to_date']}" if wr['to_date'] else "")
            )
            st.markdown("**Assignments:**")
            # Assignment table
            st.table([
                {
                    "Code": a["assignment_code"],
                    "Job": a["job_title"],
                    "Ph√≤ng ban": a["department"],
                    "Tr·∫°ng th√°i": a["status"],
                    "T·ª´": a["from_date"],
                    "ƒê·∫øn": a["to_date"] or "Hi·ªán t·∫°i",
                }
                for a in wr["assignments"]
            ])
    # Khen th∆∞·ªüng/K·ª∑ lu·∫≠t
    with tabs[4]:
        st.markdown("### L·ªãch s·ª≠ Khen th∆∞·ªüng & K·ª∑ lu·∫≠t")
        reward_punish_list = [
            {"Ng√†y": "2022-11-01", "Lo·∫°i": "Khen th∆∞·ªüng", "T√™n": "B·∫±ng khen t·∫≠p ƒëo√†n", "N·ªôi dung": "Ho√†n th√†nh xu·∫•t s·∫Øc d·ª± √°n ERP"},
            {"Ng√†y": "2023-03-10", "Lo·∫°i": "K·ª∑ lu·∫≠t", "T√™n": "Khi·ªÉn tr√°ch", "N·ªôi dung": "ƒêi l√†m tr·ªÖ nhi·ªÅu l·∫ßn"},
            # ... th√™m d√≤ng ...
        ]
        st.table(reward_punish_list)
        st.info("Ch·ªâ c√°c quy·∫øt ƒë·ªãnh c·∫•p to√†n c√° nh√¢n (Person) m·ªõi xu·∫•t hi·ªán ·ªü ƒë√¢y. C√°c quy·∫øt ƒë·ªãnh theo assignment xem chi ti·∫øt trong tab Quan h·ªá lao ƒë·ªông.")

    # T√†i li·ªáu scan (Scan documents)
    with tabs[5]:
        st.markdown("### T√†i li·ªáu scan ƒë√≠nh k√®m")
        doc_list = [
            {"Lo·∫°i": "CMND/CCCD", "T·ªáp": "cmnd_nguyenvana.pdf", "Ng√†y upload": "2022-01-05"},
            {"Lo·∫°i": "B·∫±ng ƒë·∫°i h·ªçc", "T·ªáp": "bang_daihoc.pdf", "Ng√†y upload": "2021-06-01"},
            # ... th√™m d√≤ng ...
        ]
        st.table(doc_list)
        st.info("Ch·ªâ nh·ªØng t√†i li·ªáu h·ªì s∆° g·ªëc c·ªßa c√° nh√¢n. H·ªì s∆° h·ª£p ƒë·ªìng, gi·∫•y t·ªù ph√°p nh√¢n s·∫Ω l∆∞u k√®m assignment.")

    st.divider()
    st.caption("UX xTalent: 1 Person ‚Äì N Work Relationships (Legal Entity) ‚Äì N Assignments (Job/Dept/Code). Ph√π h·ª£p chu·∫©n HR qu·ªëc t·∫ø.")

        # Tab 6: Job Matching Map (Career Opportunity Map)
    with tabs[6]:
        st.markdown("### üó∫Ô∏è C∆° h·ªôi ngh·ªÅ nghi·ªáp n·ªôi b·ªô (Job Matching Map)")
        st.info("""
        Bi·ªÉu ƒë·ªì d∆∞·ªõi ƒë√¢y gi√∫p b·∫°n h√¨nh dung c√°c **c∆° h·ªôi ph√°t tri·ªÉn ngh·ªÅ nghi·ªáp** ph√π h·ª£p trong t·ªï ch·ª©c, d·ª±a tr√™n h·ªì s∆° nƒÉng l·ª±c, b·∫±ng c·∫•p, ch·ª©ng ch·ªâ c·ªßa b·∫°n. M·ªói lu·ªìng l√† m·ªôt kh·∫£ nƒÉng n·ªëi gi·ªØa nƒÉng l·ª±c/b·∫±ng c·∫•p/ch·ª©ng ch·ªâ c·ªßa b·∫°n ƒë·∫øn k·ªπ nƒÉng then ch·ªët v√† c√°c v·ªã tr√≠ c√¥ng vi·ªác c√≥ th·ªÉ ti·∫øp c·∫≠n n·ªôi b·ªô.
        """)

        # # Dummy data: degree, competency, certification c·ªßa Nguy·ªÖn VƒÉn A
        # degree = "ƒê·∫°i h·ªçc CNTT"
        # competencies = ["Python", "SQL", "Qu·∫£n l√Ω d·ª± √°n", "Ph√¢n t√≠ch nghi·ªáp v·ª•"]
        # certifications = ["PMI Agile Certified", "AWS Practitioner"]

        # # Skills b·∫°n ƒëang c√≥
        # skills = ["L·∫≠p tr√¨nh", "Qu·∫£n tr·ªã h·ªá th·ªëng", "Ph√¢n t√≠ch d·ªØ li·ªáu", "Qu·∫£n l√Ω d·ª± √°n"]

        # # Mapping sang c√°c Job n·ªôi b·ªô
        # jobs = [
        #     "Senior Developer",
        #     "System Analyst",
        #     "Project Coordinator",
        #     "Data Analyst",
        #     "Scrum Master"
        # ]

        # # C√°c m·ªëi li√™n k·∫øt dummy: Degree/Competency/Certification ‚Üí Skill ‚Üí Job
        # nodes = [
        #     {"name": person["name"], "itemStyle": {"color": "#94c3e5"}},  # Worker node

        #     # L·ªõp Degree/Competency/Certification
        #     {"name": degree, "itemStyle": {"color": "#ffe599"}},
        #     *[{"name": c, "itemStyle": {"color": "#ffe599"}} for c in competencies],
        #     *[{"name": c, "itemStyle": {"color": "#ffe599"}} for c in certifications],

        #     # L·ªõp Skill
        #     *[{"name": s, "itemStyle": {"color": "#b6d7a8"}} for s in skills],

        #     # L·ªõp Job
        #     *[{"name": j, "itemStyle": {"color": "#b4a7d6"}} for j in jobs]
        # ]

        # links = []
        # # Worker ‚Üí Degree/Competency/Certification
        # links.append({"source": person["name"], "target": degree, "value": 2})
        # for c in competencies:
        #     links.append({"source": person["name"], "target": c, "value": 2})
        # for c in certifications:
        #     links.append({"source": person["name"], "target": c, "value": 2})

        # # Degree/Competency/Certification ‚Üí Skill
        # links += [
        #     {"source": degree, "target": "L·∫≠p tr√¨nh", "value": 2},
        #     {"source": "Qu·∫£n l√Ω d·ª± √°n", "target": "Qu·∫£n l√Ω d·ª± √°n", "value": 2},
        #     {"source": "PMI Agile Certified", "target": "Qu·∫£n l√Ω d·ª± √°n", "value": 2},
        #     {"source": "Ph√¢n t√≠ch nghi·ªáp v·ª•", "target": "Ph√¢n t√≠ch d·ªØ li·ªáu", "value": 2},
        #     {"source": "SQL", "target": "Ph√¢n t√≠ch d·ªØ li·ªáu", "value": 1.5},
        #     {"source": "AWS Practitioner", "target": "Qu·∫£n tr·ªã h·ªá th·ªëng", "value": 1.5},
        #     {"source": "Python", "target": "L·∫≠p tr√¨nh", "value": 2}
        # ]

        # # Skill ‚Üí Job
        # links += [
        #     {"source": "L·∫≠p tr√¨nh", "target": "Senior Developer", "value": 2},
        #     {"source": "Qu·∫£n tr·ªã h·ªá th·ªëng", "target": "System Analyst", "value": 1.2},
        #     {"source": "Qu·∫£n l√Ω d·ª± √°n", "target": "Project Coordinator", "value": 2},
        #     {"source": "Ph√¢n t√≠ch d·ªØ li·ªáu", "target": "Data Analyst", "value": 1.5},
        #     {"source": "Qu·∫£n l√Ω d·ª± √°n", "target": "Scrum Master", "value": 1.2},
        #     {"source": "L·∫≠p tr√¨nh", "target": "Scrum Master", "value": 1},
        # ]

        # option = {
        #     "title": {"text": "B·∫£n ƒë·ªì c∆° h·ªôi ngh·ªÅ nghi·ªáp n·ªôi b·ªô", "left": "center"},
        #     "tooltip": {"trigger": "item", "triggerOn": "mousemove"},
        #     "series": [
        #         {
        #             "type": "sankey",
        #             "data": nodes,
        #             "links": links,
        #             "emphasis": {"focus": "adjacency"},
        #             "levels": [
        #                 {"depth": 0, "itemStyle": {"color": "#94c3e5"}},
        #                 {"depth": 1, "itemStyle": {"color": "#ffe599"}},
        #                 {"depth": 2, "itemStyle": {"color": "#b6d7a8"}},
        #                 {"depth": 3, "itemStyle": {"color": "#b4a7d6"}},
        #             ],
        #             "lineStyle": {"curveness": 0.5, "color": "gradient"},
        #             "nodeGap": 24
        #         }
        #     ]
        # }

        # st_echarts(option, height="480px")

        # option = {
        #     "series": [
        #         {
        #             "type": "sankey",
        #             "data": [
        #                 {"name": "A"}, {"name": "B"}, {"name": "C"}
        #             ],
        #             "links": [
        #                 {"source": "A", "target": "B", "value": 10},
        #                 {"source": "B", "target": "C", "value": 15}
        #             ]
        #         }
        #     ]
        # }
        option = {
            "title": {"text": "B·∫£n ƒë·ªì C∆° h·ªôi Ngh·ªÅ nghi·ªáp (Job Matching Map)", "left": "center"},
            "tooltip": {"trigger": "item", "triggerOn": "mousemove"},
            "series": [
                {
                    "type": "sankey",
                    "data": [
                        # Workers
                        {"name": "Nguy·ªÖn VƒÉn A"},
                        # Degree/Comp/Cert
                        {"name": "ƒê·∫°i h·ªçc CNTT"},
                        
                        {"name": "NƒÉng l·ª±c L·∫≠p tr√¨nh"},
                        {"name": "NƒÉng l·ª±c Ph√¢n t√≠ch d·ªØ li·ªáu"},
                        {"name": "Ch·ª©ng ch·ªâ PMP"},
                        # Skills
                        {"name": "Python"},
                        {"name": "SQL"},
                        {"name": "Qu·∫£n l√Ω d·ª± √°n"},
                        {"name": "Business Analysis"},
                        # Jobs
                        {"name": "Senior Developer"},
                        {"name": "Data Analyst"},
                        {"name": "Project Manager"},
                        {"name": "Business Analyst"},
                    ],
                    "links": [
                        # Nguy·ªÖn VƒÉn A -> b·∫±ng c·∫•p/nƒÉng l·ª±c/ch·ª©ng ch·ªâ
                        {"source": "Nguy·ªÖn VƒÉn A", "target": "ƒê·∫°i h·ªçc CNTT", "value": 1},
                        {"source": "Nguy·ªÖn VƒÉn A", "target": "NƒÉng l·ª±c L·∫≠p tr√¨nh", "value": 1},
                        {"source": "Nguy·ªÖn VƒÉn A", "target": "Ch·ª©ng ch·ªâ PMP", "value": 1},
                        {"source": "Nguy·ªÖn VƒÉn A", "target": "NƒÉng l·ª±c Ph√¢n t√≠ch d·ªØ li·ªáu", "value": 1},
                        # Degree/Comp/Cert -> Skills
                        {"source": "ƒê·∫°i h·ªçc CNTT", "target": "Python", "value": 1},
                        {"source": "NƒÉng l·ª±c L·∫≠p tr√¨nh", "target": "Python", "value": 1},
                        {"source": "Ch·ª©ng ch·ªâ PMP", "target": "Qu·∫£n l√Ω d·ª± √°n", "value": 1},
                        {"source": "NƒÉng l·ª±c Ph√¢n t√≠ch d·ªØ li·ªáu", "target": "SQL", "value": 1},
                        {"source": "NƒÉng l·ª±c Ph√¢n t√≠ch d·ªØ li·ªáu", "target": "Business Analysis", "value": 1},
                        
                        # Skills -> Jobs
                        {"source": "Python", "target": "Senior Developer", "value": 1},
                        {"source": "SQL", "target": "Data Analyst", "value": 1},
                        {"source": "Business Analysis", "target": "Business Analyst", "value": 1},
                        {"source": "Qu·∫£n l√Ω d·ª± √°n", "target": "Project Manager", "value": 1},
                        {"source": "Business Analysis", "target": "Project Manager", "value": 1},  # cross skill
                    ],
                    "emphasis": {"focus": "adjacency"},
                    "lineStyle": {"color": "gradient", "curveness": 0.5},
                    "levels": [
                        {"depth": 0, "itemStyle": {"color": "#ffe599"}},       # Worker
                        {"depth": 1, "itemStyle": {"color": "#a4c2f4"}},       # Degree/Comp/Cert
                        {"depth": 2, "itemStyle": {"color": "#b6d7a8"}},       # Skill
                        {"depth": 3, "itemStyle": {"color": "#e06666"}},       # Job
                    ],
                    "label": {
                        "fontSize": 13,
                        "color": "#333",
                        "fontWeight": "bold"
                    },
                    "nodeGap": 18,
                    "nodeAlign": "justify",  # nodes gi√£n ƒë·ªÅu c√°c c·ªôt
                }
            ]
        }

        st_echarts(option, height="400px")

        st.caption("""
        üëâ M·ªói ƒë∆∞·ªùng d·∫´n th·ªÉ hi·ªán nƒÉng l·ª±c ho·∫∑c ch·ª©ng ch·ªâ hi·ªán t·∫°i c·ªßa b·∫°n, nh·ªØng k·ªπ nƒÉng t∆∞∆°ng ·ª©ng v√† c√°c v·ªã tr√≠ c√¥ng vi·ªác m√† b·∫°n ƒë√£ s·∫µn s√†ng ho·∫∑c c√≥ ti·ªÅm nƒÉng chuy·ªÉn ƒë·ªïi trong t·ªï ch·ª©c.
        """)
    with tabs[7]:
        tab_job_matching()

# ----- B·ªî SUNG: TH√äM T√äN TAB M·ªöI v√†o d√≤ng t·∫°o tabs:
# tabs = st.tabs([
#     "Th√¥ng tin c√° nh√¢n", "Li√™n h·ªá", "M·ªü r·ªông", "Quan h·ªá lao ƒë·ªông", "Khen th∆∞·ªüng/K·ª∑ lu·∫≠t", "T√†i li·ªáu scan", **"B·∫£n ƒë·ªì C∆° h·ªôi ngh·ªÅ nghi·ªáp"**
# ])